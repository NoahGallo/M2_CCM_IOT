[
    {
        "id": "f9f2d7c8e1a6b3d4",
        "type": "tab",
        "label": "IoT Dashboard",
        "disabled": false,
        "info": "IoT Sensor Dashboard - Noah Gallo - Exercise 7"
    },
    {
        "id": "mqtt_broker_config",
        "type": "mqtt-broker",
        "name": "U-Picardie MQTT",
        "broker": "mqtt.u-picardie.fr",
        "port": "8883",
        "protocol": "mqtts",
        "clientid": "NodeRED_NoahGallo",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "credentials": {
            "user": "noah.gallo",
            "password": "g22315333"
        }
    },
    {
        "id": "ui_base",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segue UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            }
        },
        "site": {
            "name": "IoT Dashboard - Noah Gallo",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "IoT Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_group_sensors",
        "type": "ui_group",
        "name": "Live Sensors",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_charts",
        "type": "ui_group",
        "name": "Sensor History",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_class",
        "type": "ui_group",
        "name": "Class Temperature Average",
        "tab": "ui_tab_main",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ui_group_controls",
        "type": "ui_group",
        "name": "Device Controls",
        "tab": "ui_tab_main",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ui_group_status",
        "type": "ui_group",
        "name": "Connection Status",
        "tab": "ui_tab_main",
        "order": 5,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "mqtt_temp_in",
        "type": "mqtt in",
        "name": "Temperature Data",
        "topic": "m2ccm/noa/g22315333/data/temperature",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_config",
        "x": 140,
        "y": 100,
        "wires": [["temp_processor"]]
    },
    {
        "id": "mqtt_lum_in",
        "type": "mqtt in",
        "name": "Luminosity Data",
        "topic": "m2ccm/noa/g22315333/data/luminosity",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_config",
        "x": 140,
        "y": 160,
        "wires": [["lum_processor"]]
    },
    {
        "id": "mqtt_sound_in",
        "type": "mqtt in",
        "name": "Sound Data",
        "topic": "m2ccm/noa/g22315333/data/sound",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_config",
        "x": 140,
        "y": 220,
        "wires": [["sound_processor"]]
    },
    {
        "id": "mqtt_status_in",
        "type": "mqtt in",
        "name": "Device Status",
        "topic": "m2ccm/noa/g22315333/statut",
        "qos": "0",
        "datatype": "utf8",
        "broker": "mqtt_broker_config",
        "x": 140,
        "y": 280,
        "wires": [["status_display"]]
    },
    {
        "id": "mqtt_class_temp",
        "type": "mqtt in",
        "name": "Class Temperatures",
        "topic": "m2ccm/+/+/temp",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_config",
        "x": 140,
        "y": 340,
        "wires": [["class_temp_processor"]]
    },
    {
        "id": "temp_processor",
        "type": "function",
        "name": "Temperature Processor",
        "func": "// Process individual temperature data\nif (!msg.payload || typeof msg.payload.value !== 'number') {\n    return null;\n}\n\nconst temp = msg.payload.value;\n\n// Bounds checking: -40°C to 85°C\nif (temp < -40 || temp > 85) {\n    node.warn(`Temperature out of bounds: ${temp}°C`);\n    return null;\n}\n\n// Flood protection\nconst now = Date.now();\nconst lastTime = context.get('lastTime') || 0;\nif (now - lastTime < 100) {\n    return null;\n}\ncontext.set('lastTime', now);\n\n// Update min/max tracking\nconst tempMin = context.get('tempMin') || Infinity;\nconst tempMax = context.get('tempMax') || -Infinity;\ncontext.set('tempMin', Math.min(tempMin, temp));\ncontext.set('tempMax', Math.max(tempMax, temp));\n\n// Send just the number value to gauge\nmsg.payload = temp;\n\nreturn msg;",
        "outputs": 1,
        "x": 380,
        "y": 100,
        "wires": [["temp_gauge", "temp_chart", "debug_temp"]]
    },
    {
        "id": "lum_processor",
        "type": "function",
        "name": "Luminosity Processor",
        "func": "// Process luminosity data\nif (!msg.payload || typeof msg.payload.value !== 'number') {\n    return null;\n}\n\nconst lum = msg.payload.value;\n\n// Bounds checking: 0% to 100%\nif (lum < 0 || lum > 100) {\n    node.warn(`Luminosity out of bounds: ${lum}%`);\n    return null;\n}\n\n// Flood protection\nconst now = Date.now();\nconst lastTime = context.get('lastTime') || 0;\nif (now - lastTime < 100) {\n    return null;\n}\ncontext.set('lastTime', now);\n\n// Update min/max tracking\nconst lumMin = context.get('lumMin') || Infinity;\nconst lumMax = context.get('lumMax') || -Infinity;\ncontext.set('lumMin', Math.min(lumMin, lum));\ncontext.set('lumMax', Math.max(lumMax, lum));\n\n// Send just the number value to gauge\nmsg.payload = lum;\n\nreturn msg;",
        "outputs": 1,
        "x": 380,
        "y": 160,
        "wires": [["lum_gauge", "lum_chart", "debug_lum"]]
    },
    {
        "id": "sound_processor",
        "type": "function",
        "name": "Sound Processor",
        "func": "// Process sound data\nif (!msg.payload || typeof msg.payload.value !== 'number') {\n    return null;\n}\n\nconst sound = msg.payload.value;\n\n// Bounds checking: 0% to 100%\nif (sound < 0 || sound > 100) {\n    node.warn(`Sound out of bounds: ${sound}%`);\n    return null;\n}\n\n// Flood protection\nconst now = Date.now();\nconst lastTime = context.get('lastTime') || 0;\nif (now - lastTime < 100) {\n    return null;\n}\ncontext.set('lastTime', now);\n\n// Update min/max tracking\nconst soundMin = context.get('soundMin') || Infinity;\nconst soundMax = context.get('soundMax') || -Infinity;\ncontext.set('soundMin', Math.min(soundMin, sound));\ncontext.set('soundMax', Math.max(soundMax, sound));\n\n// Send just the number value to gauge\nmsg.payload = sound;\n\nreturn msg;",
        "outputs": 1,
        "x": 380,
        "y": 220,
        "wires": [["sound_gauge", "sound_chart", "debug_sound"]]
    },
    {
        "id": "class_temp_processor",
        "type": "function",
        "name": "Class Temperature Average",
        "func": "// Process class temperature data\nif (!msg.payload || typeof msg.payload.temp === 'undefined') {\n    return null;\n}\n\nlet temp = msg.payload.temp;\n\n// Handle string temperatures\nif (typeof temp === 'string') {\n    temp = parseFloat(temp);\n}\n\n// Validate temperature bounds\nif (isNaN(temp) || temp < -40 || temp > 85) {\n    return null;\n}\n\n// Extract student name from topic\nconst topicParts = msg.topic.split('/');\nconst studentName = topicParts[1] || 'unknown';\n\n// Get existing class data\nlet classData = context.get('classData') || {};\nconst now = Date.now();\n\n// Update student data\nclassData[studentName] = {\n    temp: temp,\n    timestamp: now,\n    topic: msg.topic\n};\n\n// Clean old data (older than 5 minutes)\nObject.keys(classData).forEach(student => {\n    if (now - classData[student].timestamp > 300000) {\n        delete classData[student];\n    }\n});\n\n// Calculate average\nconst students = Object.keys(classData);\nconst temperatures = students.map(s => classData[s].temp);\nconst average = temperatures.length > 0 ? \n    temperatures.reduce((sum, t) => sum + t, 0) / temperatures.length : 0;\n\n// Store updated data\ncontext.set('classData', classData);\n\n// Send just the average number to gauge\nmsg.payload = average;\n\n// Also send detailed info to text display\nmsg.info = {\n    studentCount: students.length,\n    average: average\n};\n\nreturn msg;",
        "outputs": 1,
        "x": 380,
        "y": 340,
        "wires": [["class_average_gauge", "class_average_chart", "class_info_display", "debug_class"]]
    },
    {
        "id": "temp_gauge",
        "type": "ui_gauge",
        "name": "Temperature Gauge",
        "group": "ui_group_sensors",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": -40,
        "max": 85,
        "colors": ["#00b4d8", "#90e0ef", "#ff006e"],
        "seg1": 10,
        "seg2": 30,
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "lum_gauge",
        "type": "ui_gauge",
        "name": "Luminosity Gauge",
        "group": "ui_group_sensors",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Light Level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": ["#03045e", "#023e8a", "#ffd60a"],
        "seg1": 30,
        "seg2": 70,
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "sound_gauge",
        "type": "ui_gauge",
        "name": "Sound Gauge",
        "group": "ui_group_sensors",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "Sound Level",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": 100,
        "colors": ["#006a4e", "#52b788", "#ff5400"],
        "seg1": 25,
        "seg2": 75,
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "class_average_gauge",
        "type": "ui_gauge",
        "name": "Class Average Gauge",
        "group": "ui_group_class",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Class Average Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": 20,
        "max": 40,
        "colors": ["#0077b6", "#00b4d8", "#ff006e"],
        "seg1": 25,
        "seg2": 35,
        "x": 620,
        "y": 320,
        "wires": []
    },
    {
        "id": "temp_chart",
        "type": "ui_chart",
        "name": "Temperature Chart",
        "group": "ui_group_charts",
        "order": 1,
        "width": 6,
        "height": 4,
        "label": "Temperature History",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#1f77b4"],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 620,
        "y": 260,
        "wires": [[]]
    },
    {
        "id": "lum_chart",
        "type": "ui_chart",
        "name": "Luminosity Chart",
        "group": "ui_group_charts",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Light Level History",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#ff7f0e"],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 620,
        "y": 300,
        "wires": [[]]
    },
    {
        "id": "sound_chart",
        "type": "ui_chart",
        "name": "Sound Chart",
        "group": "ui_group_charts",
        "order": 3,
        "width": 6,
        "height": 4,
        "label": "Sound Level History",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "No Data",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#2ca02c"],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 620,
        "y": 340,
        "wires": [[]]
    },
    {
        "id": "class_average_chart",
        "type": "ui_chart",
        "name": "Class Temperature Chart",
        "group": "ui_group_class",
        "order": 2,
        "width": 6,
        "height": 4,
        "label": "Class Temperature Trend",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Waiting for class data...",
        "dot": false,
        "ymin": "20",
        "ymax": "40",
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": ["#e63946"],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 620,
        "y": 380,
        "wires": [[]]
    },
    {
        "id": "class_info_display",
        "type": "ui_text",
        "name": "Class Info",
        "group": "ui_group_class",
        "order": 3,
        "width": 6,
        "height": 1,
        "format": "{{msg.info.studentCount}} students active - Average: {{msg.info.average.toFixed(1)}}°C",
        "layout": "row-center",
        "x": 620,
        "y": 400,
        "wires": []
    },
    {
        "id": "led_switch",
        "type": "ui_switch",
        "name": "LED Control",
        "label": "RGB LED",
        "tooltip": "Control Arduino RGB LED",
        "group": "ui_group_controls",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 140,
        "y": 420,
        "wires": [["led_command"]]
    },
    {
        "id": "data_switch",
        "type": "ui_switch",
        "name": "Data Transmission",
        "label": "Data Stream",
        "tooltip": "Enable/Disable sensor data transmission",
        "group": "ui_group_controls",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "enable",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "disable",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 140,
        "y": 480,
        "wires": [["data_command"]]
    },
    {
        "id": "led_command",
        "type": "mqtt out",
        "name": "LED Command",
        "topic": "m2ccm/noa/g22315333/command/led",
        "qos": "0",
        "retain": "false",
        "broker": "mqtt_broker_config",
        "x": 380,
        "y": 420,
        "wires": []
    },
    {
        "id": "data_command",
        "type": "mqtt out",
        "name": "Data Command",
        "topic": "m2ccm/noa/g22315333/command/data_transmission",
        "qos": "0",
        "retain": "false",
        "broker": "mqtt_broker_config",
        "x": 380,
        "y": 480,
        "wires": []
    },
    {
        "id": "status_display",
        "type": "ui_text",
        "name": "Connection Status",
        "group": "ui_group_status",
        "order": 1,
        "width": 12,
        "height": 1,
        "format": "{{msg.payload === 'online' ? '🟢 DEVICE CONNECTED' : '🔴 DEVICE DISCONNECTED'}}",
        "layout": "row-center",
        "x": 380,
        "y": 280,
        "wires": []
    },
    {
        "id": "debug_temp",
        "type": "debug",
        "name": "Debug Temperature",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "debug_lum",
        "type": "debug",
        "name": "Debug Luminosity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 620,
        "y": 160,
        "wires": []
    },
    {
        "id": "debug_sound",
        "type": "debug",
        "name": "Debug Sound",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 620,
        "y": 220,
        "wires": []
    },
    {
        "id": "debug_class",
        "type": "debug",
        "name": "Debug Class Average",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 630,
        "y": 360,
        "wires": []
    }
]
